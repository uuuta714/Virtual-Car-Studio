{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,Y,O,Q,O,G,E,O,W,O,C,E,C,E,C,Q,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCmJA,EAAA,MAAA,CAAA,EAAA,4BAAA,IAAgB,GAnJhB,IAAA,EAAA,EAAA,SAEA,EAAA,EAAA,gBAeA,SAAS,cAAc,CAAC,wBAAwB,gBAAgB,CAAC,QAAS,WAEtE,AA4FJ,CAAA,SAA8B,CAAK,EAC/B,GAAI,AAAA,CAAA,EAAA,EAAA,WAAU,AAAV,CAAW,CAAC,EAAM,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAiB,CAEpD,IAAM,EAAY,WAAW,AADN,SAAS,cAAc,CAAC,kBACH,KAAK,EACjD,AAAA,CAAA,EAAA,EAAA,WAAW,AAAX,CAAW,CAAC,EAAM,CAAC,QAAQ,CAAC,AAAC,IACzB,GAAI,EAAM,MAAM,EACR,AAAc,YAAd,EAAM,IAAI,CAAgB,CAC1B,IAAM,EAAa,EAAM,QA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","sources":["<anon>","src/js/lighting.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"7w0Le\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n// Function to populate the studio light dropdown menu\nparcelHelpers.export(exports, \"updateStudioLightDropdown\", ()=>updateStudioLightDropdown);\nvar _three = require(\"three\");\nvar _scriptsJs = require(\"./scripts.js\");\n// Event listener for applying intensity and color change\ndocument.getElementById(\"applyIntensityButton\").addEventListener(\"click\", function() {\n    const selectedLightIndex = parseInt(document.getElementById(\"lightInstanceDropdown\").value);\n    applyIntensityChange(selectedLightIndex);\n});\ndocument.getElementById(\"applyColorButton\").addEventListener(\"click\", function() {\n    const selectedLightIndex = parseInt(document.getElementById(\"lightInstanceDropdown\").value);\n    applyColorChange(selectedLightIndex);\n});\n// Event listener for deleting light instance\ndocument.getElementById(\"deleteLightButton\").addEventListener(\"click\", function() {\n    const selectedLightIndex = parseInt(document.getElementById(\"lightInstanceDropdown\").value);\n    deleteLightInstance(selectedLightIndex);\n    updateStudioLightDropdown();\n});\n// Event listener for adding light instance\ndocument.getElementById(\"addLightButton\").addEventListener(\"click\", function() {\n    const selectedLightIndex = parseInt(document.getElementById(\"lightInstanceDropdown\").value);\n    console.log(selectedLightIndex);\n    (0, _scriptsJs.setSelectedIndex)(selectedLightIndex);\n    console.log((0, _scriptsJs.selectedIndex));\n    createLightInstance();\n    updateStudioLightDropdown();\n});\nlet cloneCounter = 1;\n// Define a function to create new instance of the light\nfunction createLightInstance() {\n    // Clone the model to create a new instance\n    let model;\n    if ((0, _scriptsJs.modelGroups)[0, _scriptsJs.selectedIndex].name.startsWith(\"studio_light\")) model = (0, _scriptsJs.modelGroups)[0, _scriptsJs.selectedIndex];\n    else model = (0, _scriptsJs.modelGroups).find((group)=>group.name.startsWith(\"studio_light\"));\n    model.rotation.set(0, 0, 0);\n    const newModel = model.clone(true);\n    newModel.traverse((node)=>{\n        if (node.isMesh) node.material = node.material.clone();\n    });\n    newModel.name = \"studio_light \" + cloneCounter++;\n    // Adjust position, scale, or any other properties if needed\n    // For example:\n    newModel.position.set(1, 0, -5);\n    // Add the new instance to the scene\n    (0, _scriptsJs.scene).add(newModel);\n    // Compute the bounding box to get size\n    const boundingBox = new _three.Box3().setFromObject(newModel);\n    const size = new _three.Vector3();\n    boundingBox.getSize(size);\n    // Create BoxGeometry based on the computed size\n    const modelDragBox = new _three.Mesh(new _three.BoxGeometry(size.x, size.y, size.z), new _three.MeshBasicMaterial({\n        transparent: true,\n        opacity: 0\n    }));\n    modelDragBox.position.copy(newModel.position);\n    modelDragBox.userData.originalY = modelDragBox.position.y += size.y / 2;\n    (0, _scriptsJs.scene).add(modelDragBox);\n    const boxHelper = new _three.BoxHelper(modelDragBox, 0xffff00);\n    boxHelper.visible = false;\n    (0, _scriptsJs.scene).add(boxHelper);\n    (0, _scriptsJs.modelGroups).push(newModel);\n    (0, _scriptsJs.draggableObjects).push(modelDragBox);\n    (0, _scriptsJs.modelDragBoxes).push(modelDragBox);\n    (0, _scriptsJs.setIndexMap)(modelDragBox);\n    (0, _scriptsJs.boxHelpers).push(boxHelper);\n    console.log((0, _scriptsJs.indexMap));\n}\n// Function to delete the selected light instance\nfunction deleteLightInstance(index) {\n    if ((0, _scriptsJs.modelGroups)[index].name.startsWith(\"studio_light\")) {\n        (0, _scriptsJs.scene).remove((0, _scriptsJs.modelGroups)[index]);\n        (0, _scriptsJs.modelGroups).splice(index, 1);\n        (0, _scriptsJs.boxHelpers).splice(index, 1);\n        (0, _scriptsJs.modelDragBoxes).splice(index, 1);\n        let key = (0, _scriptsJs.getKeyByValue)((0, _scriptsJs.indexMap), index);\n        (0, _scriptsJs.draggableObjects).splice(key, 1);\n        (0, _scriptsJs.updateIndexMap)(key, index);\n        (0, _scriptsJs.setSelectedIndex)(0);\n        console.log((0, _scriptsJs.indexMap));\n    }\n}\n// Function to apply intensity change - Updated\nfunction applyIntensityChange(index) {\n    if ((0, _scriptsJs.modelGroups)[index].name.startsWith(\"studio_light\")) {\n        const intensityInput = document.getElementById(\"intensityInput\");\n        const intensity = parseFloat(intensityInput.value);\n        (0, _scriptsJs.modelGroups)[index].traverse((child)=>{\n            if (child.isMesh) {\n                if (child.name == \"Object_7\") {\n                    const pointLight = child.children[0];\n                    if (!isNaN(intensity)) pointLight.intensity = intensity;\n                }\n            }\n        });\n    }\n}\n// Function to apply color change - Updated\nfunction applyColorChange(index) {\n    if ((0, _scriptsJs.modelGroups)[index].name.startsWith(\"studio_light\")) {\n        const colorPicker = document.getElementById(\"colorPicker\");\n        const color = new _three.Color(colorPicker.value);\n        (0, _scriptsJs.modelGroups)[index].traverse((child)=>{\n            if (child.isMesh) {\n                if (child.name == \"Object_7\") {\n                    const pointLight = child.children[0];\n                    pointLight.color = color;\n                    console.log(\"found\");\n                    child.material.emissive.set(color);\n                }\n            }\n        });\n    }\n}\nfunction updateStudioLightDropdown() {\n    const dropdown = document.getElementById(\"lightInstanceDropdown\");\n    dropdown.innerHTML = '<option value=\"\">Select a Light Instance</option>'; // Clear previous options\n    (0, _scriptsJs.modelGroups).forEach((modelGroup, index)=>{\n        if (modelGroup.name.startsWith(\"studio_light\")) {\n            const optionElement = document.createElement(\"option\");\n            optionElement.value = index;\n            optionElement.textContent = modelGroup.name;\n            dropdown.appendChild(optionElement);\n        }\n    });\n}\n\n},{\"three\":\"35GVu\",\"./scripts.js\":\"f5JPT\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}]},[\"7w0Le\"], \"7w0Le\", \"parcelRequire6fcf\")\n\n//# sourceMappingURL=index.46392fd6.js.map\n","import * as THREE from 'three';\r\nimport { Vector3 } from 'three'\r\nimport {\r\n    scene,\r\n    selectedIndex,\r\n    setSelectedIndex,\r\n    modelGroups,\r\n    boxHelpers,\r\n    modelDragBoxes,\r\n    draggableObjects,\r\n    indexMap,\r\n    setIndexMap,\r\n    getKeyByValue,\r\n    updateIndexMap\r\n} from './scripts.js'\r\n\r\n// Event listener for applying intensity and color change\r\ndocument.getElementById(\"applyIntensityButton\").addEventListener(\"click\", function() {\r\n    const selectedLightIndex = parseInt(document.getElementById('lightInstanceDropdown').value);\r\n    applyIntensityChange(selectedLightIndex);\r\n});\r\ndocument.getElementById(\"applyColorButton\").addEventListener(\"click\", function() {\r\n    const selectedLightIndex = parseInt(document.getElementById('lightInstanceDropdown').value);\r\n    applyColorChange(selectedLightIndex);\r\n});\r\n// Event listener for deleting light instance\r\ndocument.getElementById(\"deleteLightButton\").addEventListener(\"click\", function() {\r\n    const selectedLightIndex = parseInt(document.getElementById('lightInstanceDropdown').value);\r\n    deleteLightInstance(selectedLightIndex);\r\n    updateStudioLightDropdown();\r\n});\r\n// Event listener for adding light instance\r\ndocument.getElementById(\"addLightButton\").addEventListener(\"click\", function() {\r\n    const selectedLightIndex = parseInt(document.getElementById('lightInstanceDropdown').value);\r\n    console.log(selectedLightIndex)\r\n    setSelectedIndex(selectedLightIndex);\r\n    console.log(selectedIndex)\r\n    createLightInstance();\r\n    updateStudioLightDropdown();\r\n});\r\n\r\nlet cloneCounter = 1;\r\n// Define a function to create new instance of the light\r\nfunction createLightInstance() {\r\n    // Clone the model to create a new instance\r\n    let model;\r\n    if (modelGroups[selectedIndex].name.startsWith('studio_light')) {\r\n        model = modelGroups[selectedIndex];\r\n    } else {\r\n        model = modelGroups.find(group => group.name.startsWith('studio_light'));\r\n    }\r\n\t\r\n    model.rotation.set(0,0,0);\r\n    const newModel = model.clone(true);\r\n    newModel.traverse((node) => {\r\n        if (node.isMesh) {\r\n            node.material = node.material.clone();\r\n        }\r\n    });\r\n\r\n\tnewModel.name = \"studio_light \" + cloneCounter++;\r\n    // Adjust position, scale, or any other properties if needed\r\n    // For example:\r\n    newModel.position.set(1, 0, -5);\r\n    \r\n    // Add the new instance to the scene\r\n    scene.add(newModel);\r\n    \r\n    // Compute the bounding box to get size\r\n    const boundingBox = new THREE.Box3().setFromObject(newModel);\r\n    const size = new THREE.Vector3();\r\n    boundingBox.getSize(size);\r\n\r\n    // Create BoxGeometry based on the computed size\r\n    const modelDragBox = new THREE.Mesh(\r\n        new THREE.BoxGeometry(size.x, size.y, size.z),\r\n        new THREE.MeshBasicMaterial({ transparent: true, opacity: 0 })\r\n    );\r\n    modelDragBox.position.copy(newModel.position);\r\n    modelDragBox.userData.originalY = modelDragBox.position.y += size.y / 2\r\n    scene.add(modelDragBox);\r\n    \r\n    const boxHelper = new THREE.BoxHelper(modelDragBox, 0xffff00);\r\n    boxHelper.visible = false;\r\n    \r\n    scene.add(boxHelper);\r\n    \r\n    modelGroups.push(newModel)\r\n    draggableObjects.push(modelDragBox);\r\n    modelDragBoxes.push(modelDragBox);\r\n    setIndexMap(modelDragBox);\r\n    boxHelpers.push(boxHelper);\r\n    console.log(indexMap);\r\n}\r\n\r\n// Function to delete the selected light instance\r\nfunction deleteLightInstance(index) {\r\n    if (modelGroups[index].name.startsWith('studio_light')) {\r\n        scene.remove(modelGroups[index]);\r\n        modelGroups.splice(index, 1);\r\n        boxHelpers.splice(index, 1);\r\n        modelDragBoxes.splice(index, 1);\r\n        let key = getKeyByValue(indexMap, index);\r\n        draggableObjects.splice(key, 1);\r\n        updateIndexMap(key, index);\r\n        setSelectedIndex(0);\r\n        console.log(indexMap);\r\n    }\r\n}\r\n\r\n// Function to apply intensity change - Updated\r\nfunction applyIntensityChange(index) {\r\n    if (modelGroups[index].name.startsWith('studio_light')) {\r\n        const intensityInput = document.getElementById(\"intensityInput\");\r\n        const intensity = parseFloat(intensityInput.value);\r\n        modelGroups[index].traverse((child) => {\r\n            if (child.isMesh) {\r\n                if (child.name == \"Object_7\") {\r\n                    const pointLight = child.children[0];\r\n                    if (!isNaN(intensity)) {\r\n                        pointLight.intensity = intensity;\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n// Function to apply color change - Updated\r\nfunction applyColorChange(index) {\r\n    if (modelGroups[index].name.startsWith('studio_light')) {\r\n        const colorPicker = document.getElementById(\"colorPicker\");\r\n        const color = new THREE.Color(colorPicker.value);\r\n        modelGroups[index].traverse((child) => {\r\n            if (child.isMesh) {\r\n                if (child.name == \"Object_7\") {\r\n                    const pointLight = child.children[0];\r\n                    pointLight.color = color;\r\n                    console.log(\"found\");\r\n                    child.material.emissive.set(color);\r\n                }\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n// Function to populate the studio light dropdown menu\r\nexport function updateStudioLightDropdown() {\r\n    const dropdown = document.getElementById('lightInstanceDropdown');\r\n    dropdown.innerHTML = '<option value=\"\">Select a Light Instance</option>'; // Clear previous options\r\n\r\n    modelGroups.forEach((modelGroup, index) => {\r\n        if (modelGroup.name.startsWith('studio_light')) {\r\n            const optionElement = document.createElement('option');\r\n            optionElement.value = index;\r\n            optionElement.textContent = modelGroup.name;\r\n            dropdown.appendChild(optionElement);\r\n        }\r\n    });\r\n}\r\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","parcelHelpers","defineInteropFlag","export","updateStudioLightDropdown","_three","_scriptsJs","document","getElementById","addEventListener","applyIntensityChange","index","modelGroups","startsWith","intensity","parseFloat","intensityInput","value","traverse","child","isMesh","pointLight","children","isNaN","parseInt","applyColorChange","colorPicker","color","Color","console","log","material","emissive","set","deleteLightInstance","scene","remove","splice","boxHelpers","modelDragBoxes","key","getKeyByValue","indexMap","draggableObjects","updateIndexMap","setSelectedIndex","selectedLightIndex","selectedIndex","createLightInstance","model","find","group","rotation","newModel","clone","node","cloneCounter","position","add","boundingBox","Box3","setFromObject","size","Vector3","getSize","modelDragBox","Mesh","BoxGeometry","y","z","MeshBasicMaterial","transparent","opacity","copy","userData","originalY","boxHelper","BoxHelper","visible","push","setIndexMap","dropdown","innerHTML","forEach","modelGroup","optionElement","createElement","textContent","appendChild"],"version":3,"file":"index.46392fd6.js.map"}